<?php

/**
 * This is the model base class for the table "fluxo".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Fluxo".
 *
 * Columns in table "fluxo" available as properties of the model,
 * followed by relations of table "fluxo" available as properties of the model.
 *
 * @property integer $idfluxo
 * @property integer $iduser
 * @property integer $idempresa_origem
 * @property integer $idempresa_destino
 * @property integer $idconta
 * @property integer $idccusto
 * @property integer $iduser_pgto
 * @property integer $idformaspg
 * @property string $data_sistema
 * @property string $data_faturamento
 * @property string $data_vencimento
 * @property string $data_pagamento
 * @property string $data_cancelado
 * @property string $doc_numero
 * @property string $valor_fatura
 * @property string $valor_pagamento
 * @property string $valor_multa
 * @property string $valor_juros
 * @property string $observacao
 * @property integer $id_sisfat
 * @property string $tipo_sisfat
 * @property string $filename
 * @property string $nf
 *
 * @property Empresa $idempresaOrigem
 * @property Ccusto $idccusto0
 * @property Conta $idconta0
 * @property Empresa $idempresaDestino
 * @property Formaspg $idformaspg0
 * @property User $iduser0
 * @property User $iduserPgto
 */
abstract class BaseFluxo extends SActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'fluxo';
	}

	public static function representingColumn() {
		return 'data_sistema';
	}

	public function rules() {
		return array(
			array('idempresa_origem, idempresa_destino, idconta, idccusto, data_faturamento, data_vencimento, valor_fatura', 'required'),
			array('iduser, idempresa_origem, idempresa_destino, idconta, idccusto, iduser_pgto, idformaspg, id_sisfat', 'numerical', 'integerOnly'=>true),
			array('doc_numero', 'length', 'max'=>100),
			//array('valor_fatura, valor_pagamento', 'length', 'max'=>12),
			array('valor_multa, valor_juros', 'length', 'max'=>10),
			array('observacao, filename', 'length', 'max'=>255),
			array('tipo_sisfat', 'length', 'max'=>45),
			array('nf', 'length', 'max'=>8),
			array('data_pagamento, data_cancelado', 'safe'),
			array('iduser_pgto, idformaspg, data_pagamento, data_cancelado, doc_numero, valor_pagamento, valor_multa, valor_juros, observacao, id_sisfat, tipo_sisfat, filename, nf', 'default', 'setOnEmpty' => true, 'value' => null),
			array('idfluxo, iduser, idempresa_origem, idempresa_destino, idconta, idccusto, iduser_pgto, idformaspg, data_sistema, data_faturamento, data_vencimento, data_pagamento, data_cancelado, doc_numero, valor_fatura, valor_pagamento, valor_multa, valor_juros, observacao, id_sisfat, tipo_sisfat, filename, nf', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'idempresaOrigem' => array(self::BELONGS_TO, 'Empresa', 'idempresa_origem'),
			'idccusto0' => array(self::BELONGS_TO, 'Ccusto', 'idccusto'),
			'idconta0' => array(self::BELONGS_TO, 'Conta', 'idconta'),
			'idempresaDestino' => array(self::BELONGS_TO, 'Empresa', 'idempresa_destino'),
			'idformaspg0' => array(self::BELONGS_TO, 'Formaspg', 'idformaspg'),
			'iduser0' => array(self::BELONGS_TO, 'User', 'iduser'),
			'iduserPgto' => array(self::BELONGS_TO, 'User', 'iduser_pgto'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'idfluxo' => Yii::t('app', 'Idfluxo'),
			'iduser' => Yii::t('app', 'Iduser'),
			'idempresa_origem' => Yii::t('app', 'Idempresa Origem'),
			'idempresa_destino' => Yii::t('app', 'Idempresa Destino'),
			'idconta' => Yii::t('app', 'Idconta'),
			'idccusto' => Yii::t('app', 'Idccusto'),
			'iduser_pgto' => Yii::t('app', 'Iduser Pgto'),
			'idformaspg' => Yii::t('app', 'Idformaspg'),
			'data_sistema' => Yii::t('app', 'Data Sistema'),
			'data_faturamento' => Yii::t('app', 'Data Faturamento'),
			'data_vencimento' => Yii::t('app', 'Data Vencimento'),
			'data_pagamento' => Yii::t('app', 'Data Pagamento'),
			'data_cancelado' => Yii::t('app', 'Data Cancelado'),
			'doc_numero' => Yii::t('app', 'Doc Numero'),
			'valor_fatura' => Yii::t('app', 'Valor Fatura'),
			'valor_pagamento' => Yii::t('app', 'Valor Pagamento'),
			'valor_multa' => Yii::t('app', 'Valor Multa'),
			'valor_juros' => Yii::t('app', 'Valor Juros'),
			'observacao' => Yii::t('app', 'Observacao'),
			'id_sisfat' => Yii::t('app', 'Id Sisfat'),
			'tipo_sisfat' => Yii::t('app', 'Tipo Sisfat'),
			'filename' => Yii::t('app', 'Filename'),
			'nf' => Yii::t('app', 'Nf'),
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('idfluxo', $this->idfluxo);
		$criteria->compare('iduser', $this->iduser);
		$criteria->compare('idempresa_origem', $this->idempresa_origem);
		$criteria->compare('idempresa_destino', $this->idempresa_destino);
		$criteria->compare('idconta', $this->idconta);
		$criteria->compare('idccusto', $this->idccusto);
		$criteria->compare('iduser_pgto', $this->iduser_pgto);
		$criteria->compare('idformaspg', $this->idformaspg);
		$criteria->compare('data_sistema', $this->data_sistema, true);
		$criteria->compare('data_faturamento', $this->data_faturamento, true);
		$criteria->compare('data_vencimento', $this->data_vencimento, true);
		$criteria->compare('data_pagamento', $this->data_pagamento, true);
		$criteria->compare('data_cancelado', $this->data_cancelado, true);
		$criteria->compare('doc_numero', $this->doc_numero, true);
		$criteria->compare('valor_fatura', $this->valor_fatura, true);
		$criteria->compare('valor_pagamento', $this->valor_pagamento, true);
		$criteria->compare('valor_multa', $this->valor_multa, true);
		$criteria->compare('valor_juros', $this->valor_juros, true);
		$criteria->compare('observacao', $this->observacao, true);
		$criteria->compare('id_sisfat', $this->id_sisfat);
		$criteria->compare('tipo_sisfat', $this->tipo_sisfat, true);
		$criteria->compare('filename', $this->filename, true);
		$criteria->compare('nf', $this->nf, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}